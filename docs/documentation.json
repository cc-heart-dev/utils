{
  "id": 0,
  "name": "@cc-heart/utils",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 107,
      "name": "_toString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 1,
          "character": 13,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L1"
        }
      ],
      "signatures": [
        {
          "id": 108,
          "name": "_toString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a string representation of an object."
              }
            ]
          },
          "sources": [
            {
              "fileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "line": 127,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 57,
      "name": "basename",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/url.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L43"
        }
      ],
      "signatures": [
        {
          "id": 58,
          "name": "basename",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the last portion of a path, similar to the Unix basename command.\nTrims the query string if it exists.\nOptionally, removes a suffix from the result."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The basename of the path."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/url.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L43"
            }
          ],
          "parameters": [
            {
              "id": 59,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The path to get the basename from."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 60,
              "name": "suffix",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An optional suffix to remove from the basename."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 42,
      "name": "capitalize",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/string.ts",
          "line": 7,
          "character": 13,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L7"
        }
      ],
      "signatures": [
        {
          "id": 43,
          "name": "capitalize",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Capitalizes the first letter of a string."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- The capitalized string."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/string.ts",
              "line": 7,
              "character": 26,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L7"
            }
          ],
          "typeParameter": [
            {
              "id": 44,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 45,
              "name": "target",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to be capitalized."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": -1,
                "name": "T",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Capitalize"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": -1,
                "name": "T",
                "refersToTypeParameter": true
              }
            ],
            "name": "Capitalize",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 54,
      "name": "convertParamsRouterToRegExp",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/url.ts",
          "line": 27,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L27"
        }
      ],
      "signatures": [
        {
          "id": 55,
          "name": "convertParamsRouterToRegExp",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "convert params routes to regular expressions"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "null or An array contains the RegExp that matches the params and the path for each params parameter"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/url.ts",
              "line": 27,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L27"
            }
          ],
          "parameters": [
            {
              "id": 56,
              "name": "path",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "a params paths"
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "array",
                "elementType": {
                  "type": "union",
                  "types": [
                    {
                      "type": "reference",
                      "target": {
                        "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "RegExp"
                      },
                      "name": "RegExp",
                      "package": "typescript"
                    },
                    {
                      "type": "array",
                      "elementType": {
                        "type": "intrinsic",
                        "name": "string"
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 50,
      "name": "convertQueryString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/url.ts",
          "line": 7,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L7"
        }
      ],
      "signatures": [
        {
          "id": 51,
          "name": "convertQueryString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "convert query string to object"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/url.ts",
              "line": 7,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/url.ts#L7"
            }
          ],
          "typeParameter": [
            {
              "id": 52,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
                  "qualifiedName": "Record"
                },
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ],
                "name": "Record",
                "package": "typescript"
              }
            }
          ],
          "parameters": [
            {
              "id": 53,
              "name": "url",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "http url"
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": -1,
            "name": "T",
            "refersToTypeParameter": true
          }
        }
      ]
    },
    {
      "id": 20,
      "name": "defineDebounceFn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/define.ts",
          "line": 23,
          "character": 13
        }
      ],
      "signatures": [
        {
          "id": 21,
          "name": "defineDebounceFn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "DefineDebounceFn is a function that creates a debounced function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- The debounce function."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/define.ts",
              "line": 9,
              "character": 2
            }
          ],
          "parameters": [
            {
              "id": 22,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to be debounced."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "lib/define.ts",
                  "qualifiedName": "CacheResultFunc"
                },
                "name": "CacheResultFunc",
                "package": "@cc-heart/utils"
              }
            },
            {
              "id": 23,
              "name": "delay",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The delay in milliseconds to wait before the debounced function is called. Default is 500ms."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 24,
              "name": "immediate",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Whether the debounced function should be called immediately before the delay. Default is false."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "defineOnceFn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/define.ts",
          "line": 51,
          "character": 16
        }
      ],
      "signatures": [
        {
          "id": 6,
          "name": "defineOnceFn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Creates a function that can only be called once."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- A new function that can only be called once."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/define.ts",
              "line": 51,
              "character": 16
            }
          ],
          "typeParameter": [
            {
              "id": 7,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {}
            }
          ],
          "parameters": [
            {
              "id": 8,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to be called once."
                  }
                ]
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 9,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "lib/define.ts",
                      "line": 51,
                      "character": 36
                    }
                  ],
                  "signatures": [
                    {
                      "id": 10,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "lib/define.ts",
                          "line": 51,
                          "character": 36
                        }
                      ],
                      "parameters": [
                        {
                          "id": 11,
                          "name": "args",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "literal",
                            "value": null
                          },
                          {
                            "type": "reference",
                            "target": -1,
                            "name": "T",
                            "refersToTypeParameter": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 12,
              "name": "__type",
              "variant": "declaration",
              "kind": 65536,
              "flags": {},
              "sources": [
                {
                  "fileName": "lib/define.ts",
                  "line": 57,
                  "character": 9
                }
              ],
              "signatures": [
                {
                  "id": 13,
                  "name": "__type",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "lib/define.ts",
                      "line": 57,
                      "character": 9
                    }
                  ],
                  "parameters": [
                    {
                      "id": 14,
                      "name": "this",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    },
                    {
                      "id": 15,
                      "name": "args",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "target": -1,
                        "name": "T",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 16,
      "name": "defineThrottleFn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/define.ts",
          "line": 72,
          "character": 16
        }
      ],
      "signatures": [
        {
          "id": 17,
          "name": "defineThrottleFn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "defineThrottleFn is a function that creates a throttled function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- The throttled function."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/define.ts",
              "line": 72,
              "character": 16
            }
          ],
          "parameters": [
            {
              "id": 18,
              "name": "fn",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The function to be throttled."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": {
                  "sourceFileName": "typings/helper.ts",
                  "qualifiedName": "fn"
                },
                "name": "fn",
                "package": "@cc-heart/utils"
              }
            },
            {
              "id": 19,
              "name": "delay",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The delay in milliseconds to wait before the throttled function is called. Default is 500ms."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "500"
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "lib/define.ts",
              "qualifiedName": "CacheResultFunc"
            },
            "name": "CacheResultFunc",
            "package": "@cc-heart/utils"
          }
        }
      ]
    },
    {
      "id": 109,
      "name": "executeConcurrency",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/workers.ts",
          "line": 4,
          "character": 22
        }
      ],
      "signatures": [
        {
          "id": 110,
          "name": "executeConcurrency",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "sources": [
            {
              "fileName": "lib/workers.ts",
              "line": 4,
              "character": 22
            }
          ],
          "parameters": [
            {
              "id": 111,
              "name": "tasks",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": {
                    "sourceFileName": "typings/helper.ts",
                    "qualifiedName": "fn"
                  },
                  "name": "fn",
                  "package": "@cc-heart/utils"
                }
              }
            },
            {
              "id": 112,
              "name": "maxConcurrency",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Promise"
            },
            "typeArguments": [
              {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            ],
            "name": "Promise",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 113,
      "name": "executeQueue",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/workers.ts",
          "line": 36,
          "character": 16
        }
      ],
      "signatures": [
        {
          "id": 114,
          "name": "executeQueue",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Invokes a queue."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- A promise that resolves when all tasks are completed."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/workers.ts",
              "line": 36,
              "character": 16
            }
          ],
          "parameters": [
            {
              "id": 115,
              "name": "taskArray",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "An array of tasks to be executed."
                  }
                ]
              },
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reflection",
                  "declaration": {
                    "id": 116,
                    "name": "__type",
                    "variant": "declaration",
                    "kind": 65536,
                    "flags": {},
                    "sources": [
                      {
                        "fileName": "lib/workers.ts",
                        "line": 37,
                        "character": 19
                      }
                    ],
                    "signatures": [
                      {
                        "id": 117,
                        "name": "__type",
                        "variant": "signature",
                        "kind": 4096,
                        "flags": {},
                        "sources": [
                          {
                            "fileName": "lib/workers.ts",
                            "line": 37,
                            "character": 19
                          }
                        ],
                        "parameters": [
                          {
                            "id": 118,
                            "name": "args",
                            "variant": "param",
                            "kind": 32768,
                            "flags": {
                              "isRest": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "any"
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Promise"
            },
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "void"
              }
            ],
            "name": "Promise",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "getCurrentTimeISOString",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/date.ts",
          "line": 5,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/date.ts#L5"
        }
      ],
      "signatures": [
        {
          "id": 4,
          "name": "getCurrentTimeISOString",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns the current time in ISO string format."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The current time in ISO string format."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/date.ts",
              "line": 5,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/date.ts#L5"
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 103,
      "name": "hasOwn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 151,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L151"
        }
      ],
      "signatures": [
        {
          "id": 104,
          "name": "hasOwn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given object has its own property."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the object has its own property, otherwise false."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 151,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L151"
            }
          ],
          "parameters": [
            {
              "id": 105,
              "name": "obj",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The object to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "object"
              }
            },
            {
              "id": 106,
              "name": "prop",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The property to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      ]
    },
    {
      "id": 94,
      "name": "isArrayEquals",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 125,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L125"
        }
      ],
      "signatures": [
        {
          "id": 95,
          "name": "isArrayEquals",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if two arrays are equal."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the arrays are equal, otherwise false."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 125,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L125"
            }
          ],
          "parameters": [
            {
              "id": 96,
              "name": "firstArr",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The first array to compare."
                  }
                ]
              },
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            },
            {
              "id": 97,
              "name": "secondArr",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The second array to compare."
                  }
                ]
              },
              "type": {
                "type": "array",
                "elementType": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            },
            {
              "id": 98,
              "name": "compareFunc",
              "variant": "param",
              "kind": 32768,
              "flags": {
                "isOptional": true
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 99,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "lib/validate.ts",
                      "line": 128,
                      "character": 16,
                      "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L128"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 100,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "lib/validate.ts",
                          "line": 128,
                          "character": 16,
                          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L128"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 101,
                          "name": "a",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        },
                        {
                          "id": 102,
                          "name": "b",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      ]
    },
    {
      "id": 70,
      "name": "isBool",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 39,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L39"
        }
      ],
      "signatures": [
        {
          "id": 71,
          "name": "isBool",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the provided value is a boolean."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is a boolean, false otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 39,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L39"
            }
          ],
          "parameters": [
            {
              "id": 72,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "boolean"
            }
          }
        }
      ]
    },
    {
      "id": 88,
      "name": "isEffectiveNumber",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 98,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L98"
        }
      ],
      "signatures": [
        {
          "id": 89,
          "name": "isEffectiveNumber",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "determines if it is a valid value other than NaN"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": []
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 98,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L98"
            }
          ],
          "parameters": [
            {
              "id": 90,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        }
      ]
    },
    {
      "id": 82,
      "name": "isFalsy",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 79,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L79"
        }
      ],
      "signatures": [
        {
          "id": 83,
          "name": "isFalsy",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if a value is falsy."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is falsy, otherwise false."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 79,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L79"
            }
          ],
          "parameters": [
            {
              "id": 84,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "literal",
              "value": false
            }
          }
        }
      ]
    },
    {
      "id": 64,
      "name": "isFn",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 19,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L19"
        }
      ],
      "signatures": [
        {
          "id": 65,
          "name": "isFn",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given value is a function."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is a function, false otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 19,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L19"
            }
          ],
          "parameters": [
            {
              "id": 66,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to be checked."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Function"
              },
              "name": "Function",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 76,
      "name": "isNull",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 59,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L59"
        }
      ],
      "signatures": [
        {
          "id": 77,
          "name": "isNull",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given value is null."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is null, false otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 59,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L59"
            }
          ],
          "parameters": [
            {
              "id": 78,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "literal",
              "value": null
            }
          }
        }
      ]
    },
    {
      "id": 85,
      "name": "isNumber",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 89,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L89"
        }
      ],
      "signatures": [
        {
          "id": 86,
          "name": "isNumber",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given value is a number."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is a number, false otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 89,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L89"
            }
          ],
          "parameters": [
            {
              "id": 87,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to be checked."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        }
      ]
    },
    {
      "id": 61,
      "name": "isObject",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 9,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L9"
        }
      ],
      "signatures": [
        {
          "id": 62,
          "name": "isObject",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given value is an object."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is an object, otherwise false."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 9,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L9"
            }
          ],
          "parameters": [
            {
              "id": 63,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to be checked."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "object"
            }
          }
        }
      ]
    },
    {
      "id": 79,
      "name": "isPrimitive",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 69,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L69"
        }
      ],
      "signatures": [
        {
          "id": 80,
          "name": "isPrimitive",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Determines whether a value is a primitive."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the value is a primitive, "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": " otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 69,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L69"
            }
          ],
          "parameters": [
            {
              "id": 81,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      ]
    },
    {
      "id": 91,
      "name": "isPromise",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 109,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L109"
        }
      ],
      "signatures": [
        {
          "id": 92,
          "name": "isPromise",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if a value is a Promise."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns "
                  },
                  {
                    "kind": "code",
                    "text": "`true`"
                  },
                  {
                    "kind": "text",
                    "text": " if the value is a Promise, else "
                  },
                  {
                    "kind": "code",
                    "text": "`false`"
                  },
                  {
                    "kind": "text",
                    "text": "."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 109,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L109"
            }
          ],
          "parameters": [
            {
              "id": 93,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "reference",
              "target": {
                "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
                "qualifiedName": "Promise"
              },
              "typeArguments": [
                {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              ],
              "name": "Promise",
              "package": "typescript"
            }
          }
        }
      ]
    },
    {
      "id": 67,
      "name": "isStr",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 29,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L29"
        }
      ],
      "signatures": [
        {
          "id": 68,
          "name": "isStr",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if the given value is a string."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is a string, false otherwise."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 29,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L29"
            }
          ],
          "parameters": [
            {
              "id": 69,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to be checked."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        }
      ]
    },
    {
      "id": 73,
      "name": "isUndef",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/validate.ts",
          "line": 49,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L49"
        }
      ],
      "signatures": [
        {
          "id": 74,
          "name": "isUndef",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Checks if a value is undefined."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "Returns true if the value is undefined, otherwise false."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/validate.ts",
              "line": 49,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/validate.ts#L49"
            }
          ],
          "parameters": [
            {
              "id": 75,
              "name": "val",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The value to check."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "unknown"
              }
            }
          ],
          "type": {
            "type": "predicate",
            "name": "val",
            "asserts": false,
            "targetType": {
              "type": "intrinsic",
              "name": "undefined"
            }
          }
        }
      ]
    },
    {
      "id": 34,
      "name": "mulSplit",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/string.ts",
          "line": 26,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L26"
        }
      ],
      "signatures": [
        {
          "id": 35,
          "name": "mulSplit",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [],
            "blockTags": [
              {
                "tag": "@description",
                "content": [
                  {
                    "kind": "text",
                    "text": "Add the number of cuts based on the original split and return all subsets after the cut"
                  }
                ]
              },
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "a new split array, length is num + 1"
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/string.ts",
              "line": 26,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L26"
            }
          ],
          "parameters": [
            {
              "id": 36,
              "name": "str",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "need to split of primitive string"
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 37,
              "name": "splitStr",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "split params"
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 38,
              "name": "num",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "split limit"
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "-1"
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        }
      ]
    },
    {
      "id": 29,
      "name": "noop",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/shard.ts",
          "line": 6,
          "character": 13,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/shard.ts#L6"
        }
      ],
      "signatures": [
        {
          "id": 30,
          "name": "noop",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This function does nothing."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "No return value."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/shard.ts",
              "line": 6,
              "character": 20,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/shard.ts#L6"
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          }
        }
      ]
    },
    {
      "id": 25,
      "name": "random",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/random.ts",
          "line": 8,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/random.ts#L8"
        }
      ],
      "signatures": [
        {
          "id": 26,
          "name": "random",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Generates a random integer between min (inclusive) and max (inclusive)."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A random integer between min and max."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/random.ts",
              "line": 8,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/random.ts#L8"
            }
          ],
          "parameters": [
            {
              "id": 27,
              "name": "min",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The minimum value (inclusive)."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 28,
              "name": "max",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The maximum value (inclusive)."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 1,
      "name": "randomUUID",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/crypto.ts",
          "line": 6,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/crypto.ts#L6"
        }
      ],
      "signatures": [
        {
          "id": 2,
          "name": "randomUUID",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Generates a random UUID."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The generated UUID."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/crypto.ts",
              "line": 6,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/crypto.ts#L6"
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 31,
      "name": "sleep",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/shard.ts",
          "line": 16,
          "character": 13,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/shard.ts#L16"
        }
      ],
      "signatures": [
        {
          "id": 32,
          "name": "sleep",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Sleeps for a given delay."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "A promise that resolves after the delay."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/shard.ts",
              "line": 16,
              "character": 21,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/shard.ts#L16"
            }
          ],
          "parameters": [
            {
              "id": 33,
              "name": "delay",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The delay, in milliseconds."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Promise"
            },
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "unknown"
              }
            ],
            "name": "Promise",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 46,
      "name": "unCapitalize",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/string.ts",
          "line": 16,
          "character": 13,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L16"
        }
      ],
      "signatures": [
        {
          "id": 47,
          "name": "unCapitalize",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns a new string with the first character converted to lowercase."
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "- The unCapitalized string."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/string.ts",
              "line": 16,
              "character": 28,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L16"
            }
          ],
          "typeParameter": [
            {
              "id": 48,
              "name": "T",
              "variant": "typeParam",
              "kind": 131072,
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "parameters": [
            {
              "id": 49,
              "name": "target",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The string to be unCapitalized."
                  }
                ]
              },
              "type": {
                "type": "reference",
                "target": -1,
                "name": "T",
                "refersToTypeParameter": true
              }
            }
          ],
          "type": {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
              "qualifiedName": "Uncapitalize"
            },
            "typeArguments": [
              {
                "type": "reference",
                "target": -1,
                "name": "T",
                "refersToTypeParameter": true
              }
            ],
            "name": "Uncapitalize",
            "package": "typescript"
          }
        }
      ]
    },
    {
      "id": 39,
      "name": "underlineToHump",
      "variant": "declaration",
      "kind": 64,
      "flags": {},
      "sources": [
        {
          "fileName": "lib/string.ts",
          "line": 43,
          "character": 16,
          "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L43"
        }
      ],
      "signatures": [
        {
          "id": 40,
          "name": "underlineToHump",
          "variant": "signature",
          "kind": 4096,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Converts an underline-separated string to camel case.\ne.g. underlineToHump('hello_word') => 'helloWord'"
              }
            ],
            "blockTags": [
              {
                "tag": "@returns",
                "content": [
                  {
                    "kind": "text",
                    "text": "The camel case version of the input string."
                  }
                ]
              }
            ]
          },
          "sources": [
            {
              "fileName": "lib/string.ts",
              "line": 43,
              "character": 16,
              "url": "https://github.com/cc-hearts/utils/blob/73da771/lib/string.ts#L43"
            }
          ],
          "parameters": [
            {
              "id": 41,
              "name": "target",
              "variant": "param",
              "kind": 32768,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "The underline-separated string to convert."
                  }
                ]
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Functions",
      "children": [
        107, 57, 42, 54, 50, 20, 5, 16, 109, 113, 3, 103, 94, 70, 88, 82, 64,
        76, 85, 61, 79, 91, 67, 73, 34, 29, 25, 1, 31, 46, 39
      ]
    }
  ],
  "packageName": "@cc-heart/utils",
  "readme": [
    {
      "kind": "text",
      "text": "# @cc-heart/utils\n\n[Docs](https://cc-hearts.github.io/utils/)\n\nA library of JavaScript tools\n\n## Install\n\n"
    },
    {
      "kind": "code",
      "text": "```shell\nnpm install @cc-heart/utils\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## Usage\n\n"
    },
    {
      "kind": "code",
      "text": "```js\nimport { capitalize } from '@cc-heart/utils'\n\ncapitalize('string') // String\n```"
    },
    {
      "kind": "text",
      "text": "\n\n## LICENSE\n\n"
    },
    {
      "kind": "code",
      "text": "`@cc-heart/utils`"
    },
    {
      "kind": "text",
      "text": " is licensed under the [MIT License](./LICENSE)."
    }
  ],
  "symbolIdMap": {
    "0": {
      "sourceFileName": "index.ts",
      "qualifiedName": ""
    },
    "1": {
      "sourceFileName": "lib/crypto.ts",
      "qualifiedName": "randomUUID"
    },
    "2": {
      "sourceFileName": "lib/crypto.ts",
      "qualifiedName": "randomUUID"
    },
    "3": {
      "sourceFileName": "lib/date.ts",
      "qualifiedName": "getCurrentTimeISOString"
    },
    "4": {
      "sourceFileName": "lib/date.ts",
      "qualifiedName": "getCurrentTimeISOString"
    },
    "5": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineOnceFn"
    },
    "6": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineOnceFn"
    },
    "7": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "T"
    },
    "8": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "fn"
    },
    "9": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "__type"
    },
    "10": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "__type"
    },
    "11": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "args"
    },
    "12": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "__function"
    },
    "13": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "__function"
    },
    "14": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "this"
    },
    "15": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "args"
    },
    "16": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineThrottleFn"
    },
    "17": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineThrottleFn"
    },
    "18": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "fn"
    },
    "19": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "delay"
    },
    "20": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineDebounceFn"
    },
    "21": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "defineDebounceFn"
    },
    "22": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "fn"
    },
    "23": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "delay"
    },
    "24": {
      "sourceFileName": "lib/define.ts",
      "qualifiedName": "immediate"
    },
    "25": {
      "sourceFileName": "lib/random.ts",
      "qualifiedName": "random"
    },
    "26": {
      "sourceFileName": "lib/random.ts",
      "qualifiedName": "random"
    },
    "27": {
      "sourceFileName": "lib/random.ts",
      "qualifiedName": "min"
    },
    "28": {
      "sourceFileName": "lib/random.ts",
      "qualifiedName": "max"
    },
    "29": {
      "sourceFileName": "lib/shard.ts",
      "qualifiedName": "noop"
    },
    "30": {
      "sourceFileName": "lib/shard.ts",
      "qualifiedName": "noop"
    },
    "31": {
      "sourceFileName": "lib/shard.ts",
      "qualifiedName": "sleep"
    },
    "32": {
      "sourceFileName": "lib/shard.ts",
      "qualifiedName": "sleep"
    },
    "33": {
      "sourceFileName": "lib/shard.ts",
      "qualifiedName": "delay"
    },
    "34": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "mulSplit"
    },
    "35": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "mulSplit"
    },
    "36": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "str"
    },
    "37": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "splitStr"
    },
    "38": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "num"
    },
    "39": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "underlineToHump"
    },
    "40": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "underlineToHump"
    },
    "41": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "target"
    },
    "42": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "capitalize"
    },
    "43": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "capitalize"
    },
    "44": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "T"
    },
    "45": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "target"
    },
    "46": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "unCapitalize"
    },
    "47": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "unCapitalize"
    },
    "48": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "T"
    },
    "49": {
      "sourceFileName": "lib/string.ts",
      "qualifiedName": "target"
    },
    "50": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "convertQueryString"
    },
    "51": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "convertQueryString"
    },
    "52": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "T"
    },
    "53": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "url"
    },
    "54": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "convertParamsRouterToRegExp"
    },
    "55": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "convertParamsRouterToRegExp"
    },
    "56": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "path"
    },
    "57": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "basename"
    },
    "58": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "basename"
    },
    "59": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "path"
    },
    "60": {
      "sourceFileName": "lib/url.ts",
      "qualifiedName": "suffix"
    },
    "61": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isObject"
    },
    "62": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isObject"
    },
    "63": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "64": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isFn"
    },
    "65": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isFn"
    },
    "66": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "67": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isStr"
    },
    "68": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isStr"
    },
    "69": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "70": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isBool"
    },
    "71": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isBool"
    },
    "72": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "73": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isUndef"
    },
    "74": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isUndef"
    },
    "75": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "76": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isNull"
    },
    "77": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isNull"
    },
    "78": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "79": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isPrimitive"
    },
    "80": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isPrimitive"
    },
    "81": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "82": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isFalsy"
    },
    "83": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isFalsy"
    },
    "84": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "85": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isNumber"
    },
    "86": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isNumber"
    },
    "87": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "88": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isEffectiveNumber"
    },
    "89": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isEffectiveNumber"
    },
    "90": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "91": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isPromise"
    },
    "92": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isPromise"
    },
    "93": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "val"
    },
    "94": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isArrayEquals"
    },
    "95": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "isArrayEquals"
    },
    "96": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "firstArr"
    },
    "97": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "secondArr"
    },
    "98": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "compareFunc"
    },
    "99": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "__type"
    },
    "100": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "__type"
    },
    "101": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "a"
    },
    "102": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "b"
    },
    "103": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "hasOwn"
    },
    "104": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "hasOwn"
    },
    "105": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "obj"
    },
    "106": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "prop"
    },
    "107": {
      "sourceFileName": "lib/validate.ts",
      "qualifiedName": "_toString"
    },
    "108": {
      "sourceFileName": "node_modules/.pnpm/typescript@4.9.5/node_modules/typescript/lib/lib.es5.d.ts",
      "qualifiedName": "_toString"
    },
    "109": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "executeConcurrency"
    },
    "110": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "executeConcurrency"
    },
    "111": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "tasks"
    },
    "112": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "maxConcurrency"
    },
    "113": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "executeQueue"
    },
    "114": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "executeQueue"
    },
    "115": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "taskArray"
    },
    "116": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "__type"
    },
    "117": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "__type"
    },
    "118": {
      "sourceFileName": "lib/workers.ts",
      "qualifiedName": "args"
    }
  }
}
